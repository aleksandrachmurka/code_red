Last 
Summary of what we've learned on last session:
1.	How to use gradle for dependency management.
2.	How to write applications using SpringBoot (https://www.javadevjournal.com/spring-boot/what-is-spring-boot/)
3.	How to use SQL from Java to query relational database and to update it. (https://dzone.com/articles/how-to-specify-named-parameters-using-the-namedpar, https://spring.io/guides/gs/relational-data-access/)
4.	User interface (https://www.thymeleaf.org/) 

Tutorial:
https://www.baeldung.com/spring-boot-crud-thymeleaf

You can get the code from github:
https://github.com/lslonina/user-manager-wit


Task:
Go through the code:
1.	Try to add one more field to user object (e.g. email, birthdate) and provide ability to store and modify this field from user interface.
2.	Instead of using User object, try to write application for different type e.g. Item (with fields: id, itemName, quantity). Update user interface and database access classes.


Ponizej kilka sugestii: 
1.	Pola w klasie Item mozna oznaczyc jako private (zwlaszcza, ze i tak dostajemy sie do pol poprzez metody getX() – tzw. gettery)
2.	Czy warto byloby pola w klasie Item dodatkowo oznaczyc jako final ? Patrzac na aktualny kod, takie podejscie powinno zadzialac. Ogolnie polecam poczytac o slowie kluczowym final i koncepcji tzw. Immutable objects:
https://stackoverflow.com/questions/137868/using-the-final-modifier-whenever-applicable-in-java
https://www.baeldung.com/java-immutable-object
3.	Proponuje dodac/wygenerowac (alt +insert) metode toString() w klasie Item, a nastepenie po utworzeniu kazdego obiektu wyprintowac go (e.g. System.out.println("Created item: " + item)) w klasie Application Shopping
(linie 52/53)
4.	Czy warto byloby przeniesc metody calculateTotalCost/calculateFinalCost jako niestatyczne metody do klasy Item ? 



7
Try to implement the examples from this presentation by yourself
Experiment , modify, see what happens.
Create another implementation of an 'Item': A Notebook that along with Price has : Owner's name, page count. 
Bonus task :
Modify our box, so it is able to give us the most expensive item ( returns )
Bonus task #2 : 
Modify our box, so we are able to remove the cheapest item 


8
Material covered on last session:
•	Reading/writing to the files
https://www.tutorialspoint.com/java/java_files_io.htm
•	Exceptions handling
https://www.w3schools.com/java/java_try_catch.asp
•	Gradle
https://www.jetbrains.com/help/idea/getting-started-with-gradle.html
https://www.tutorialspoint.com/gradle/gradle_build_a_java_project.htm

Homework:
1.	Create code that reads from console and writes the data to the file.
2.	Write code that reads from internet (https://raw.githubusercontent.com/fivethirtyeight/data/master/airline-safety/airline-safety.csv) and stores data to the file. Calculate average and sum per each column, try to think about creating object model for this data.
Having single line read as String you can use a string.split(",") method on this object and then you have access to all parts:
String string = "name,mail";
String[] parts = string.split(",");
String name = parts[0]; //name
String mail = parts[1]; //mail
3.	Create gradle project according to the tutorial/code provided in presentation.

http://click.et.oreilly.com/?qs=d1a2f87586a9a6b87830bb2d29708d386fd855a07a03e57451d07d454596df9a77859d0ec9949cc09d24b6b585b57ecf69357b34f6dfc55eeff47b26dfa48c07
https://www.oreilly.com/member/login/?next=%2Fapi%2Fv1%2Fauth%2Fopenid%2Fauthorize%3Flogin_context%3DeyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpbWFnZSI6Imljb25fYWxlcnRfdGVhbC5wbmciLCJtZXNzYWdlIjoiTG9naW4gaXMgbm93IHVuaWZpZWQgYWNyb3NzIE8nUmVpbGx5LiBQbGVhc2UgdXNlIHlvdXIgTydSZWlsbHkgY3JlZGVudGlhbHMgdG8gYWNjZXNzIHlvdXIgT25saW5lIExlYXJuaW5nIGFjY291bnQuIiwibGlua3MiOnsic2lnbl91cCI6eyJ0ZXh0IjoiU3RhcnQgYSBmcmVlIHRyaWFsLiIsImxpbmsiOiJodHRwczovL2xlYXJuaW5nLm9yZWlsbHkuY29tL3JlZ2lzdGVyLyJ9fX0.Nh-qjdUCam7vmBES1j5EKu3cLQMExW_mI66N-VISAM6Q5IWO85Rjk1qXjYFC_lszIam4JZiDt5hXXrW0JZvu-QHej5uveFyWBRxzwMJ9p9i5fMRrF7Z5xsV27ku252-3yVzH7rMsjuRjOP8xVcNZTpOg1a4eK9H-I0NSxCEnTL8UQl4FxuW2d9OAsFW6jMxwVNyxTBbsBVXBncGrcla-b1XSY0ndWWqhfds7g3AqAL2BjlfI-4yKkY3Zu-romtDL2mxwqfM_yO9JGbpr6D3ScDS6k9DySojDaXyZBTIPSbLTemwuQUmcy_VPbYwokNZ4GECg4BRD0W11r0L-090bAA%26scope%3Dopenid%2Bprofile%2Bemail%26state%3DtYDM5APWFXE195FnUwSK0nRD4iZiWSZV%26redirect_uri%3Dhttps%3A%2F%2Flearning.oreilly.com%2Fcomplete%2Funified%2F%26response_type%3Dcode%26client_id%3D235442&locale=en
